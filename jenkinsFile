pipeline {
    agent any
    environment {
        EMAIL_RECIPIENTS = 'maleksaadani90@gmail.com'
		def mvnHome = tool 'Maven'
    }
    stages {
        stage('Clone Repo') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: 'main']],
                doGenerateSubmoduleConfigurations: false,gitTool: 'Default',
                submoduleCfg: [], userRemoteConfigs: [[ 
                url: 'https://github.com/Amin23Tn/DevTimesheet.git']]])
            }
        }
		stage('Clean Tests Stage') {
            steps {
                script{
                    bat "mvn clean test"
				}
            }
        }
        stage('Clean Compile Stage') {
            steps {
                script{
                    bat "mvn clean compile "
				}
            }
        }
		stage('Deploy and Quality Gate Stage') {
			parallel {
				stage('Deploy to Nexus') {
					steps {
						script{
							bat "mvn clean package deploy:deploy-file -DgroupId=tn.esprit.spring -DartifactId=Timesheet-spring-boot-core-data-jpa-mvc-REST-1 -Dversion=1.0 -DgeneratePom=true -Dpackaging=jar -DrepositoryId=deploymentRepo -Durl=http://localhost:8081/repository/maven-releases/ -Dfile=C:/Users/bureau/Documents/workspace-sts-3.8.4.RELEASE/TimesheetProject/target/Timesheet-spring-boot-core-data-jpa-mvc-REST-1-1.0.jar"
						}
					}
				}
				stage('Quality Gate') {
					steps {
						script{
  
 
                             bat "mvn -U sonar:sonar -Dsonar.host.url=http://localhost:9000 -Dsonar.login=aaa6ee91a8ee0fd320a5fbe6de5dedaf4e167058"
                            
                            
						}    
					}
				}
			}
		}
		stage('docker') {
					steps {
						script{
  
 
                             bat "docker-compose down"
                             bat "docker-compose up --build -d"
                            
                            
						}    
                        }   
	}
     
    }
    post { 
        success {
                emailext (
                    to: "${EMAIL_RECIPIENTS}",
                    replyTo: "${EMAIL_RECIPIENTS}",
                    subject: "[BuildResult][${currentBuild.currentResult}] - Job '${env.JOB_NAME}' (${env.BUILD_NUMBER})",
                    mimeType: 'text/html',
                    body: '''${JELLY_SCRIPT, template="custom-html.jelly"}'''
                )
        }
		failure {
                emailext (
                    to: "${EMAIL_RECIPIENTS}",
                    replyTo: "${EMAIL_RECIPIENTS}",
                    subject: "[BuildResult][${currentBuild.currentResult}] - Job '${env.JOB_NAME}' (${env.BUILD_NUMBER})",
                    mimeType: 'text/html',
                    body: '''${JELLY_SCRIPT, template="custom-html.jelly"}'''
                )
        }
		aborted {
			     emailext (
                    to: "${EMAIL_RECIPIENTS}",
                    replyTo: "${EMAIL_RECIPIENTS}",
                    subject: "[BuildResult][${currentBuild.currentResult}] - Job '${env.JOB_NAME}' (${env.BUILD_NUMBER})",
                    mimeType: 'text/html',
                    body: '''${JELLY_SCRIPT, template="custom-html.jelly"}'''
                )
		}
    }
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 25, unit: 'MINUTES')
    }
}
